---
alwaysApply: true
---

## Workflow по @tasklist.md для разработки по @vision.md

- **Цель**: разрабатывать функциональность строго по плану из @tasklist.md, реализуя видение из @vision.md.
- **Принцип**: KISS — минимальные инкременты, простые решения, только главное.

## Процесс работы над каждой итерацией
1) **Планирование**
   - [ ] Изучить текущую итерацию в @docs/tasklist.md
   - [ ] Предложить техническое решение с примерами кода (сигнатуры, интерфейсы, структура файлов)
   - [ ] **ОБЯЗАТЕЛЬНО дождаться явного согласования от пользователя**
   - [ ] **НИКАКИХ действий по созданию файлов до подтверждения плана**
2) **Согласование решения (до кода)**
   - Краткий план итерации с примерами кода: фрагменты интерфейсов, сигнатуры функций, шаблоны конфигов/структуры файлов.
   - Указать: цель, файлы к изменению/созданию, критерии приёмки, способ тестирования.
   - Дождаться подтверждения.
3) **Реализация (по согласованному плану)**
   - Вносить только согласованные изменения. Без отклонений от @tasklist.md и утверждённого плана.
4) **Проверка (локально)**
   - Запустить проверки/тесты, кратко зафиксировать результат (что работает, где смотреть логи/вывод).
5) **Подтверждение результата**
   - Показать итог (дифф ключевых файлов, команды запуска, краткий лог/скрин). Остановиться и ждать подтверждения.
6) **Обновление прогресса**
   - Обновить сводную таблицу и чекбоксы в @docs/tasklist.md: статус/дата/заметки.
   - Отметить выполненные задачи итерации как завершённые.
7) **Коммит**
   - Сделать коммит в репозиторий с понятным сообщением: "feat/fix/docs: кратко что сделано (task: <итерация/название>)".
8) **Переход к следующей итерации**
   - Запросить согласование старта следующей итерации. До согласования — не начинать.

## Правильный порядок действий

1. **Планирование**: Изучить → Предложить план → **ЖДАТЬ подтверждения**
2. **Реализация**: Только после "да" от пользователя
3. **Завершение**: Обновить прогресс → Коммит
4. **Переход**: Ждать согласия на следующую итерацию

## Обязательные проверки

Перед завершением итерации:
- [ ] Код соответствует @docs/conventions.md
- [ ] Тестирование из @docs/tasklist.md проходит
- [ ] Нет linting ошибок
- [ ] Все файлы созданы строго по согласованному плану

## Запрещено

- **СОЗДАВАТЬ/ИЗМЕНЯТЬ ЛЮБЫЕ ФАЙЛЫ БЕЗ СОГЛАСОВАНИЯ ПЛАНА**
- **Использовать write, search_replace, MultiEdit до одобрения пользователем**
- Переходить к следующей итерации без подтверждения
- Менять план без согласования
- Пропускать обновление прогресса
- Создавать файлы не из плана
- Коммитить без завершения итерации

## Коммуникация (коротко)
- Перед началом: что будет сделано и примеры кода для согласования.
- После реализации: что именно сделано и где смотреть изменения (файлы/фрагменты).
- После проверки: результаты теста и готовность к подтверждению.

## Правила обновления @tasklist.md

**Выполненная подзадача**:
```diff
- - [ ] Создать src/bot.py
+ - [x] Создать src/bot.py
```

**Завершенная итерация**:
```diff
- | [ ] 1 | Базовый бот + конфиг + логи | ⏳ Не начато | `/start` + логи | - |
+ | [x] 1 | Базовый бот + конфиг + логи | ✅ Готово | `/start` + логи | YYYY-MM-DD |
```## Workflow по @tasklist.md для разработки по @vision.md

- **Цель**: разрабатывать функциональность строго по плану из @tasklist.md, реализуя видение из @vision.md.
- **Принцип**: KISS — минимальные инкременты, простые решения, только главное.

## Процесс работы над каждой итерацией
1) **Планирование**
   - [ ] Изучить текущую итерацию в @docs/tasklist.md
   - [ ] Предложить техническое решение с примерами кода (сигнатуры, интерфейсы, структура файлов)
   - [ ] **ОБЯЗАТЕЛЬНО дождаться явного согласования от пользователя**
   - [ ] **НИКАКИХ действий по созданию файлов до подтверждения плана**
2) **Согласование решения (до кода)**
   - Краткий план итерации с примерами кода: фрагменты интерфейсов, сигнатуры функций, шаблоны конфигов/структуры файлов.
   - Указать: цель, файлы к изменению/созданию, критерии приёмки, способ тестирования.
   - Дождаться подтверждения.
3) **Реализация (по согласованному плану)**
   - Вносить только согласованные изменения. Без отклонений от @tasklist.md и утверждённого плана.
4) **Проверка (локально)**
   - Запустить проверки/тесты, кратко зафиксировать результат (что работает, где смотреть логи/вывод).
5) **Подтверждение результата**
   - Показать итог (дифф ключевых файлов, команды запуска, краткий лог/скрин). Остановиться и ждать подтверждения.
6) **Обновление прогресса**
   - Обновить сводную таблицу и чекбоксы в @docs/tasklist.md: статус/дата/заметки.
   - Отметить выполненные задачи итерации как завершённые.
7) **Коммит**
   - Сделать коммит в репозиторий с понятным сообщением: "feat/fix/docs: кратко что сделано (task: <итерация/название>)".
8) **Переход к следующей итерации**
   - Запросить согласование старта следующей итерации. До согласования — не начинать.

## Правильный порядок действий

1. **Планирование**: Изучить → Предложить план → **ЖДАТЬ подтверждения**
2. **Реализация**: Только после "да" от пользователя
3. **Завершение**: Обновить прогресс → Коммит
4. **Переход**: Ждать согласия на следующую итерацию

## Обязательные проверки

Перед завершением итерации:
- [ ] Код соответствует @docs/conventions.md
- [ ] Тестирование из @docs/tasklist.md проходит
- [ ] Нет linting ошибок
- [ ] Все файлы созданы строго по согласованному плану

## Запрещено

- **СОЗДАВАТЬ/ИЗМЕНЯТЬ ЛЮБЫЕ ФАЙЛЫ БЕЗ СОГЛАСОВАНИЯ ПЛАНА**
- **Использовать write, search_replace, MultiEdit до одобрения пользователем**
- Переходить к следующей итерации без подтверждения
- Менять план без согласования
- Пропускать обновление прогресса
- Создавать файлы не из плана
- Коммитить без завершения итерации

## Коммуникация (коротко)
- Перед началом: что будет сделано и примеры кода для согласования.
- После реализации: что именно сделано и где смотреть изменения (файлы/фрагменты).
- После проверки: результаты теста и готовность к подтверждению.

## Правила обновления @tasklist.md

**Выполненная подзадача**:
```diff
- - [ ] Создать src/bot.py
+ - [x] Создать src/bot.py
```

**Завершенная итерация**:
```diff
- | [ ] 1 | Базовый бот + конфиг + логи | ⏳ Не начато | `/start` + логи | - |
+ | [x] 1 | Базовый бот + конфиг + логи | ✅ Готово | `/start` + логи | YYYY-MM-DD |
```